{"version":3,"sources":["Components/Table.js","Components/Welcome.js","config/api.js","Components/Dashboard.js","Components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Table","Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dataGet","headingValue","result","text","searching","bind","assertThisInitialized","e","target","value","filter","element","name","substring","length","toLowerCase","setState","_this$state","arr","react_default","a","createElement","placeholder","onChange","className","class","map","i","key","id","url","screenData","crimeCategory","forcelocation","Promise","resolve","reject","fetch","concat","then","res","json","catch","message","swal","title","buttons","timer","Dashboard","crimeList","forcesList","finalList","limit","finalSearchCrime","finalSearchFroce","searchFinally","fetchData","resultDashBoardCrime","resultDashBoardForces","console","log","screenResult","scrollHeight","Math","ceil","clientHeight","scrollTop","loadMore","_this$state2","temp","toConsumableArray","item","onClick","onScroll","items","index","category","month","outcome_status","Nav","changeType","event","_this2","response","Dashboard_Dashboard","Table_Table","App","Nav_Nav","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a94f7cec.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport \"./Table.css\";\r\nexport default class Table extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            dataGet: [],\r\n            headingValue: \"\",\r\n            result: [],\r\n            text: ''\r\n        }\r\n\r\n        this.searching = this.searching.bind(this) // searching function bind\r\n    }\r\n\r\n    // i am getin data from getDerivedStateFromProps set in state \r\n    static getDerivedStateFromProps(props, state) {\r\n        state.dataGet = props.result\r\n        if (props.value === \"forces\") {\r\n            state.headingValue = 'id';\r\n        } else {\r\n            state.headingValue = 'url';\r\n        }\r\n\r\n\r\n    }\r\n\r\n    // searching function its getting value from input field\r\n    searching(e) {\r\n        const { dataGet } = this.state;\r\n        const text = e.target.value;\r\n        const result = dataGet.filter((element) => {\r\n            return element.name.substring(0, text.length).toLowerCase() === (text.toLowerCase())\r\n\r\n        })\r\n\r\n        this.setState({ result, text }); // setstate new Data in After searching\r\n\r\n    }\r\n\r\n    render() {\r\n        const { dataGet, headingValue, result, text } = this.state;\r\n        const arr = text.length ? result : dataGet; // this is condition when searchin variable length 0 display data esle newdate\r\n        return (\r\n            <div>\r\n                {/* this is Input For searching */}\r\n                <input placeholder=\"Search\" onChange={this.searching} className=\"search-input\" />\r\n\r\n\r\n                <table class=\"zebra\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th><center>S.NO</center></th>\r\n                            <th><center>{headingValue}</center></th>\r\n                            <th>Name</th>\r\n\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {/* Finally date Render */}\r\n                        {arr.map((e, i) => {\r\n                            return (\r\n                                <tr key={1 + i} >\r\n                                    <td><center>{1 + i}</center></td>\r\n                                    {/* this condition use data rendring forces , crime-categories  */}\r\n                                    {headingValue === \"id\" ? <td>{e.id}</td> : <td>{e.url}</td>}\r\n                                    <td>{e.name}</td>\r\n                                </tr>)\r\n                        })}\r\n\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nexport default class Welcome extends Component{\r\n    render(){\r\n        return(\r\n            <h1>WELCOME TO DASHBOARD</h1>\r\n        )\r\n    }\r\n}\r\n","import swal from 'sweetalert';\r\n\r\nfunction searchDataCrime() {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        fetch('https://data.police.uk/api/crime-categories')\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                resolve(res)\r\n            }).catch(e => {\r\n                reject({ message: \"Something Went Wrong...\" })\r\n            })\r\n\r\n    })\r\n\r\n}\r\n\r\nfunction searchDataFroces() {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        fetch('https://data.police.uk/api/forces')\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                resolve(res)\r\n            }).catch(e => {\r\n                reject({ message: \"Something Went Wrong...\" })\r\n            })\r\n\r\n    })\r\n\r\n}\r\n\r\n\r\nfunction screenData(crimeCategory, forcelocation) {\r\n    return new Promise((resolve, reject) => {\r\n        if (crimeCategory !== \"\" && forcelocation !== \"\") {\r\n            fetch(`https://data.police.uk/api/crimes-no-location?category=${crimeCategory}&force=${forcelocation}`)\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    resolve(res)\r\n                }).catch(e => {\r\n                    reject({ message: \"Something Went Wrong...\" })\r\n                })\r\n        } else {\r\n            swal({\r\n                title: \"Select Category and Force\",\r\n                buttons: false,\r\n                text: \"\",\r\n                timer: 1500,\r\n            });\r\n        }\r\n\r\n    })\r\n\r\n}\r\n\r\nexport {\r\n    searchDataCrime,\r\n    searchDataFroces,\r\n    screenData\r\n}","import React, { Component } from 'react';\r\nimport swal from 'sweetalert';\r\nimport './Table.css'\r\nimport './dashboard.css';\r\nimport { searchDataCrime, searchDataFroces, screenData } from '../config/api'\r\n\r\n\r\n\r\n\r\nexport default class Dashboard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            crimeList: [],\r\n            forcesList: [],\r\n            crimeCategory: '',\r\n            forcelocation: '',\r\n            finalList: [],\r\n            limit: 15\r\n        }\r\n\r\n        this.finalSearchCrime = this.finalSearchCrime.bind(this);\r\n        this.finalSearchFroce = this.finalSearchFroce.bind(this);\r\n        this.searchFinally = this.searchFinally.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchData()\r\n    }\r\n\r\n    async fetchData() {\r\n\r\n        try {\r\n            const resultDashBoardCrime = await searchDataCrime();\r\n            const resultDashBoardForces = await searchDataFroces();\r\n            //console.log(resultDashBoard)\r\n            this.setState({\r\n                crimeList: resultDashBoardCrime,\r\n                forcesList: resultDashBoardForces,\r\n            })\r\n        } catch (e) {\r\n\r\n            console.log('somevent wrong')\r\n        }\r\n    }\r\n\r\n    finalSearchCrime(e) {\r\n\r\n        console.log(e.target.value + \"<=====c\")\r\n        this.setState({ crimeCategory: e.target.value })\r\n\r\n    }\r\n\r\n    finalSearchFroce(e) {\r\n\r\n        console.log(e.target.value + \"<=====f\")\r\n        this.setState({ forcelocation: e.target.value })\r\n    }\r\n\r\n    async  searchFinally() {\r\n        const { crimeCategory, forcelocation } = this.state;\r\n\r\n        console.log(crimeCategory, forcelocation)\r\n        const screenResult = await screenData(crimeCategory, forcelocation);\r\n        console.log(\"screnn =======>\", screenResult)\r\n        if (screenResult.length > 0 && (crimeCategory !== \"\" && forcelocation !== \"\")) {\r\n            this.setState({ finalList: screenResult })\r\n        } else {\r\n            this.setState({ finalList: [], })\r\n            swal({\r\n                title: \"Result Not Found\",\r\n                buttons: false,\r\n                text: \"\",\r\n                timer: 1500,\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n onScroll(e) {\r\n    if(e.target.scrollHeight === Math.ceil(e.target.clientHeight + e.target.scrollTop)) {\r\n        this.loadMore();\r\n    }\r\n}\r\n\r\nloadMore() {\r\n    console.log('loadmore ==>')\r\n    this.setState({\r\n        limit: this.state.limit + 15\r\n    })\r\n}\r\n\r\n    render() {\r\n        const { crimeList, forcesList, finalList } = this.state;\r\n        const { limit } = this.state;\r\n        const temp = [...finalList];\r\n        temp.length = limit;\r\n\r\n        return (\r\n            <div className=\"selectBarHeader\">\r\n                <div className=\"selectBar\">\r\n                    <select className=\"selectDesign\" onChange={this.finalSearchCrime}>\r\n                        <option value=\"\">select Category</option>\r\n                        {crimeList.map(item => {\r\n                            return (<option key={item.url} value={item.url}>{item.name}</option>)\r\n                        })}\r\n\r\n                    </select>\r\n\r\n                    <select className=\"selectDesign\" onChange={this.finalSearchFroce}>\r\n                        <option value=\"\">Select Force</option>\r\n                        {forcesList.map(item => {\r\n                            return (<option key={item.id} value={item.id}>{item.name}</option>)\r\n                        })}\r\n                    </select>\r\n                    <button className='searchBtn' onClick={this.searchFinally} >Search</button>\r\n                    <hr />\r\n                </div>\r\n\r\n                <div className=\"scrollingDiv\" onScroll={this.onScroll.bind(this)}>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th><center>S.No</center></th>\r\n                                <th><center>Category</center></th>\r\n                                <th><center>Month</center></th>\r\n                                <th><center>Outcome</center></th>\r\n\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n\r\n                            {temp.map((items, index) => {\r\n                                return (\r\n                                    <tr key={`${index}`}>\r\n                                        {console.log(items)}\r\n                                        <td><center>{1 + index}</center></td>\r\n                                        <td>{items.category}</td>\r\n                                        <td>{items.month}</td>\r\n                                        <td>{items.outcome_status.category}</td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n\r\n\r\n                        </tbody>\r\n                    </table>\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\n","import React, {Component} from 'react';\r\nimport '../App.css';\r\nimport Welcome from './Welcome';\r\nimport Table from './Table';\r\nimport Dashboard from \"./Dashboard\"\r\n\r\nexport default class Nav extends Component{\r\n    \r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            value : \"Dashboard\", //value define for searching type\r\n\r\n        }\r\n\r\n        this.changeType = this.changeType.bind(this) // this function bind of type change\r\n         \r\n    }\r\n\r\n    //this function of changing type\r\n    changeType(event){\r\n\r\n        const value = event.target.value; // its get value from select from\r\n\r\n        if(value !== 'Dashboard'){ //this condition use for hide table when selete value = Dashboard\r\n        fetch(`https://data.police.uk/api/${value}`) //geting Data from API\r\n        .then(response => response.json())\r\n        .then(result => this.setState({value,result})) // this is promiss set value and result in satart\r\n        }else{\r\n            this.setState({value} )\r\n        }\r\n     \r\n    }\r\n\r\n  \r\n\r\n\r\n    render(){\r\n        const {value,result} = this.state;\r\n        return(\r\n            <div className=\"App\">\r\n            <div className=\"nav\">\r\n            <nav className=\"navBar\">\r\n            {/* this is three tab console.log(result)*/ }\r\n            <select  onChange={this.changeType} className=\"selectDesign\">\r\n            <option value='Dashboard'>Dashboard</option>\r\n              <option value='forces'>Forces</option>\r\n              <option value='crime-categories'>Crime Categories</option>\r\n            </select>\r\n           </nav>\r\n           </div>\r\n          {value === \"Dashboard\"  ? <Dashboard />  // welcome Compeneted import and set on condional redring \r\n          : \r\n          // this table component import\r\n          <Table  \r\n          result={result}\r\n          value={value}/>   \r\n          }\r\n\r\n\r\n           </div> \r\n         \r\n         \r\n        )\r\n    }\r\n    }\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './Components/Nav';\n\n\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      Searching Dashboard\n      </header>\n\n      <Nav /> {/*Navbar component import*/}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif (module.hot) {\n    module.hot.accept();\n    }\n"],"sourceRoot":""}